--employees 에서 전체 내용 조회
SELECT
	*
FROM
	EMPLOYEES e ;
	
--first_name, last_name, job_id 조회
SELECT
	FIRST_NAME,
	last_name,
	job_id
FROM
	EMPLOYEES e ;
	
--사원번호가 176인 사람의 LAST_NAME 과 DEPARTMENT_ID 조회
SELECT LAST_NAME, DEPARTMENT_ID  FROM EMPLOYEES WHERE EMPLOYEE_ID=176;

--연봉이 12000 이상 되는 직원들의 LAST_NAME과 SALARY 조회
SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE SALARY >= 12000;

--연봉이 5000에서 12000의 범위 이외인 사람들의 LAST_NAME과 SALARY 조회
SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE SALARY>12000 OR SALARY<5000;

--부서번호가 20, 50 부서에서 근무하는 사원들의 LAST_NAME, DEPARTMENT_ID 조회
SELECT LAST_NAME, DEPARTMENT_ID  FROM EMPLOYEES WHERE DEPARTMENT_ID IN(20,50) ;

--부서번호가 20, 50 부서에서 근무하는 사원들의 LAST_NAME, DEPARTMENT_ID 오름차순 조회
SELECT LAST_NAME, DEPARTMENT_ID  FROM EMPLOYEES WHERE DEPARTMENT_ID IN(20,50) ORDER BY LAST_NAME , DEPARTMENT_ID ;

--커미션을 버는 모든 사원들의 LAST_NAME, SALARY, COMMISSION_PCT 조회
SELECT LAST_NAME, SALARY, COMMISSION_PCT FROM EMPLOYEES WHERE COMMISSION_PCT>0 ORDER BY SALARY DESC, COMMISSION_PCT DESC;

--SALARY가 2500,3500,7000이 아니며 JOB_ID이 SA_REP 나 ST_CLERK인 사원 조회
SELECT * FROM EMPLOYEES WHERE SALARY NOT IN(2500,3000,7000) AND JOB_ID IN('SA_REP','ST_CLERK');

--2017-01-01 ~ 2017-12-31 사이에 고용도니 사원들의 LAST_NAME, EMPLOYEE_ID, HIRE_DATE 조회
--HIRE_DATE 내림차순 정렬
SELECT LAST_NAME, EMPLOYEE_ID , HIRE_DATE FROM EMPLOYEES WHERE HIRE_DATE >='2017-01-01' AND HIRE_DATE <='2017-12-31' ORDER BY HIRE_DATE DESC; 

--BETWEEN A AND B
--부서번호가 20, 50 부서에서 근무하고, 연봉이 5000 ~ 12000 사이인 사원들의 LAST_NAME, SALARY 조회
--SALARY 오름차순
SELECT LAST_NAME, SALARY 
FROM EMPLOYEES 
WHERE DEPARTMENT_ID IN(20,50) AND SALARY BETWEEN 5000 AND 12000
ORDER BY SALARY ;


--2017-01-01 ~ 2017-12-31 사이에 고용된 사원들의 LAST_NAME,EMPLOYEE_ID, HIRE_DATE 조회
--HIRE_DATE 내림차순 정렬
SELECT LAST_NAME, EMPLOYEE_ID, HIRE_DATE
FROM EMPLOYEES 
WHERE HIRE_DATE BETWEEN '2017-01-01' AND '2017-12-31' 
ORDER BY HIRE_DATE DESC;

--연봉이 5000에서 12000의 범위 이외인 사람들의 LAST_NAME과 SALARY 조회
SELECT LAST_NAME, SALARY 
FROM EMPLOYEES 
WHERE SALARY NOT BETWEEN 5000 AND 12000;

--LAST_NAME에 u가 포함되는 사람들의 사번, LAST_NAME 조회
SELECT LAST_NAME , EMPLOYEE_ID
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%u%';

--LAST_NAME 의 4번째 문자가 a 인 사원들의 사번, LAST_NAME 조회
SELECT LAST_NAME , EMPLOYEE_ID
FROM EMPLOYEES
WHERE LAST_NAME LIKE '___a%';

--LAST_NAME 에 a 혹은 e 글자가 들어있는 사원들의 사번, LAST_NAME 조회후 LAST_NAMER 오름차순 조회
SELECT LAST_NAME , EMPLOYEE_ID
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%a%' OR LAST_NAME LIKE '%e%' 
ORDER BY LAST_NAME ;

--LAST_NAME 에 a 와 e 글자가 들어있는 사원들의 사번, LAST_NAME 조회후 LAST_NAME 오름차순 조회
SELECT LAST_NAME , EMPLOYEE_ID
FROM EMPLOYEES
WHERE LAST_NAME LIKE '%a%e%' or LAST_NAME LIKE '%e%a%' 
ORDER BY LAST_NAME ASC ;

--매니저가 없는 사람들의 LAST_NAME JOB_ID 조회
SELECT LAST_NAME , JOB_ID 
FROM EMPLOYEES
WHERE MANAGER_ID IS NULL;

--ST_CLERK인 JOB_ID를 가진 사원이 없는 부서 ID 조회(단, 부서번호가 NULL인 사원 제외)
SELECT DISTINCT DEPARTMENT_ID 
FROM EMPLOYEES
WHERE JOB_ID != 'ST_CLERK' AND DEPARTMENT_ID IS NOT NULL;

--COMMISSION_PCT가 NULL 이 아닌 사원들 중에서 COMMISSION = SALARY * COMMISSION_PCT를 구하여 
--EMPLOYEE_ID, FIRST_NAME, JOB_ID를 조회
SELECT  EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY * COMMISSION_PCT COMMISSION
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

--NULL * 숫자 = NULL
SELECT  EMPLOYEE_ID, FIRST_NAME, JOB_ID,COMMISSION_PCT ,SALARY , SALARY * COMMISSION_PCT COMMISSION
FROM EMPLOYEES;

--FIRST_NAME이 'Curtis'인 사원의 FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, JOB_ID 를 조회한다
--단, JOB_ID 결과는 소문자로 출력한다
SELECT FIRST_NAME , LAST_NAME , EMAIL , PHONE_NUMBER, LOWER(JOB_ID) 
FROM EMPLOYEES e 
WHERE FIRST_NAME='Curtis';

--부서번호가 60,70,80,90 인 사원들의 EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, JOB_ID 조회
--단 JOB_ID가 IT_PROG인 사원의 경우 프로그래머로 변경하여 출력한다.
SELECT EMPLOYEE_ID , FIRST_NAME , HIRE_DATE , REPLACE(JOB_ID,'IT_PROG','프로그래머' ) 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN (60,70,80,90); 

--JOB_ID가 AD_PRES, PU_CLERK인 사원들의 EMPLOYEE_ID, FIRST_NAME, JOB_ID 조회
--단, 사원명은 FIRST_NAME 과 LAST_NAME을 공백을 포함하여 연결
--'ABC' 'DEF' => 'ABC DEF'
SELECT EMPLOYEE_ID , FIRST_NAME || ' '|| LAST_NAME AS NAME  , JOB_ID
FROM EMPLOYEES e 
WHERE JOB_ID IN('AD_PRES','PU_CLERK');

--실습4
SELECT
	LAST_NAME ,
	SALARY ,
	CASE 
		WHEN SALARY BETWEEN 0 AND 1999 THEN '0'
		WHEN SALARY BETWEEN 2000 AND 3999 THEN '0.09'
		WHEN SALARY BETWEEN 4000 AND 5999 THEN '0.2'
		WHEN SALARY BETWEEN 6000 AND 7999 THEN '0.3'
		WHEN SALARY BETWEEN 8000 AND 9999 THEN '0.4'
		WHEN SALARY BETWEEN 10000 AND 11999 THEN '0.42'
		WHEN SALARY BETWEEN 12000 AND 13999 THEN '0.44'
		WHEN SALARY >= 14000 THEN '0.45'
	END AS TAX_RATE
FROM
	EMPLOYEES e 
WHERE DEPARTMENT_ID = 80;

SELECT
	LAST_NAME ,
	SALARY ,
	CASE TRUNC(SALARY/2000,0)
		WHEN 0 THEN '0'
		WHEN 1 THEN '0.09'
		WHEN 2 THEN '0.2'
		WHEN 3 THEN '0.3'
		WHEN 4 THEN '0.4'
		WHEN 5 THEN '0.42'
		WHEN 6 THEN '0.44'
		ELSE '0.45'
	END AS TAX_RATE
FROM
	EMPLOYEES e 
WHERE DEPARTMENT_ID = 80;


--최대 연봉 - 최소 연봉 차이조회
SELECT MAX(SALARY)-MIN(SALARY) AS GAB
FROM EMPLOYEES e ;


--매니저로 근무하는 사원들의 총 수 조회(매니저번호 중복 제거)
SELECT COUNT(DISTINCT MANAGER_ID)
FROM EMPLOYEES e ;

--부서별 직원 수 구하기(부서번호의 오름차순 출력)
SELECT DEPARTMENT_ID , COUNT(DEPARTMENT_ID)
FROM
	EMPLOYEES e
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID ;

--부서별 평균 급여 (부서번호의 오름차순 출력)
SELECT DEPARTMENT_ID , AVG(SALARY)
FROM
	EMPLOYEES e
GROUP BY DEPARTMENT_ID 
ORDER BY DEPARTMENT_ID ;

--동일한 직무(JOB_ID)를 가진 사원들의 총 수 조회
SELECT JOB_ID , COUNT(EMPLOYEE_ID)
FROM
	EMPLOYEES e
GROUP BY JOB_ID
ORDER BY JOB_ID;


--매니저가 관리하는 사원들 중에서 최소급여 조회
--매니저가 관리하는 사원들 중에서 최소급여가 6000 미만인 최소급여는 제외
--매니저가 없는 사원 제외
SELECT MANAGER_ID , MIN(SALARY)
FROM EMPLOYEES e 
WHERE MANAGER_ID IS NOT NULL
GROUP BY MANAGER_ID HAVING MIN(SALARY) >= 6000
ORDER BY MANAGER_ID ;


--자신의 담당 매니저의 고용일보다 빠른 입사자 찾기
--HIRE_DATE, LAST_NAME, MANAGER_ID출력
SELECT
	e.EMPLOYEE_ID AS 내사원번호,
	e.HIRE_DATE AS 내입사일,
	E.LAST_NAME AS 내이름,
	e.MANAGER_ID AS 매니저번호,
	e2.HIRE_DATE AS 매니저입사일
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	e.manager_id = e2.EMPLOYEE_ID  AND E.HIRE_DATE < E2.HIRE_DATE;


--도시 이름이 T로 시작하는 지역에 사는 사원들의 사번,LAST-NAME,부서번호,도시명 조회
--(도시명은 LOCATIONS 테이블에)
SELECT
	E.EMPLOYEE_ID,
	E.LAST_NAME ,
	E.DEPARTMENT_ID,
	l.CITY 
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN LOCATIONS l ON
	D.LOCATION_ID = L.LOCATION_ID
WHERE l.city LIKE 'T%';


---위치 아이디가 1700인 사원들의 LAST_NAME,부서번호, 연봉 조회
SELECT
	E.LAST_NAME,
	E.DEPARTMENT_ID ,
	E.SALARY
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE D.LOCATION_ID = 1700;


--부서명 위치ID ,각부서별 사원 수, 각 부서별 평균연봉 조회
--평균 연봉은 소수점 2자리 까지만 표현
SELECT
	D.DEPARTMENT_ID ,
	D.LOCATION_ID ,
	count(e.EMPLOYEE_ID),
	ROUND(AVG(e.SALARY), 2)
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY D.DEPARTMENT_ID, D.LOCATION_ID
ORDER BY d.LOCATION_ID ;


--EXCUTIVE부서에 근무하는 사원들의 부서번호,LAST_NAME, JOB_ID 조회
SELECT
	d.DEPARTMENT_ID ,
	e.LAST_NAME ,
	e.job_id
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
AND d.DEPARTMENT_NAME = 'Executive';

--각 사원별 소속 부서에서 자신보다 늦게 고용되었으나 많은 연봉을 받는 사원이 존재하는
--사원들의 이름조회(이름은 FIRST_NAME 과 LAST_NAME을 결합하여 하나로 나오게 하기)
--부서번호, 결합된 이름, salary, HIRE_DATE 출력
SELECT
	DISTINCT e.department_id AS 부서번호,
	e.first_name || ' ' || e.last_name AS 내이름,
	e.salary AS 내급여,
	e.HIRE_DATE AS 내입사일
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	e.DEPARTMENT_ID = e2.DEPARTMENT_ID
	AND e.salary < e2.SALARY AND e.HIRE_DATE < e2.HIRE_DATE ;

--LAST_NAME 에 u가 포함되는 사원들과 동일 부서에 근무하는 사원들의 사번 및 LAST_NAME 조회
--사번 오름차순
SELECT
	EMPLOYEE_ID ,
	LAST_NAME
FROM
	EMPLOYEES
WHERE
	DEPARTMENT_ID IN (
	SELECT
		DISTINCT DEPARTMENT_ID
	FROM
		EMPLOYEES
	WHERE
		LAST_NAME LIKE '%u%')
ORDER BY
	EMPLOYEE_ID;

--기존의 직업을 여전히 가지고 있는 사원들의 사번및 job_id 조회
--EMPLOYEES, JOB_HISTORY 이용
SELECT e.EMPLOYEE_ID , e.JOB_ID 
FROM EMPLOYEES e WHERE(e.EMPLOYEE_ID , e.JOB_ID) IN (SELECT jh.EMPLOYEE_ID ,jh.JOB_ID FROM JOB_HISTORY jh);

--SELECT 서브쿼리
--각 직무별 연봉 총합 및 각 부서별 연봉 총합 조회
--JOB_ID, 부서별 연봉총합, 직무별 전체 연봉총합
SELECT E.JOB_ID, (SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=10 AND E.JOB_ID = e2.job_id ) AS DEPT10,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=20 AND E.JOB_ID = e2.job_id ) AS DEPT20,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=30 AND E.JOB_ID = e2.job_id ) AS DEPT30,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=40 AND E.JOB_ID = e2.job_id ) AS DEPT40,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=50 AND E.JOB_ID = e2.job_id ) AS DEPT50,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=60 AND E.JOB_ID = e2.job_id ) AS DEPT60,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=70 AND E.JOB_ID = e2.job_id ) AS DEPT70,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=80 AND E.JOB_ID = e2.job_id ) AS DEPT80,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=90 AND E.JOB_ID = e2.job_id ) AS DEPT90,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=100 AND E.JOB_ID = e2.job_id ) AS DEPT100,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE DEPARTMENT_ID=110 AND E.JOB_ID = e2.job_id ) AS DEPT110,
(SELECT SUM(SALARY) FROM EMPLOYEES e2 WHERE e.JOB_ID = e2.job_id) AS TOTAL
FROM EMPLOYEES e GROUP BY JOB_ID ORDER BY JOB_ID ;

--JOB_ID 가 SA_MAN인 사원들의 최대 연봉보다 높게 받는 사원들의 LAST_NAME, JOB_ID, SALARY 조회
SELECT LAST_NAME, JOB_ID, SALARY FROM EMPLOYEES e WHERE SALARY > (SELECT MAX(SALARY) FROM EMPLOYEES WHERE JOB_ID = 'SA_MAN');

--커미션을 버는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME, 부서번호, 연봉 조회
SELECT LAST_NAME, DEPARTMENT_ID , SALARY  FROM EMPLOYEES  WHERE (DEPARTMENT_ID,SALARY) IN (SELECT DEPARTMENT_ID ,SALARY FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL);

--회사 전체 평균 연봉보다 더 많이 버는 사원들 중 LAST_NAME에 u가 있는 사원들이 근무하는 부서에서 근무하는 사원들의
--LAST_NAME, 부서번호, 연봉 조회
SELECT LAST_NAME, DEPARTMENT_ID , SALARY  
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID (SELECT SALARY >  (SELECT AVG(SALARY) FROM EMPLOYEES
AND LAST_NAME LIKE '%u%';

--각 부서별 평균 연봉보다 더 받는 동일 부서 근무사원들의 LAST_NAME, 부서번호, 연봉 및 해당 부서의 평균 연봉 조회
--부서별 연봉을 기준으로 정렬
SELECT
	e1.LAST_NAME, e1.DEPARTMENT_ID , e1.SALARY , e2.DEPT_SAL_AVG
FROM
    EMPLOYEES e1,
	(
	SELECT
		DEPARTMENT_ID,
		AVG(SALARY) AS DEPT_SAL_AVG
	FROM
		EMPLOYEES 
	GROUP BY
		DEPARTMENT_ID) e2 
WHERE 
   e1.DEPARTMENT_ID = e2.DEPARTMENT_ID AND e1.SALARY > e2.DEPT_SAL_AVG
  ORDER BY e1.DEPARTMENT_ID ;

--LAST_NAME이 Davies인 사람보다 후에 고용된 사원들의 LAST_NAME, HIRE_DATE 조회
SELECT LAST_NAME, HIRE_DATE FROM EMPLOYEES e WHERE HIRE_DATE > (SELECT HIRE_DATE FROM EMPLOYEES e WHERE LAST_NAME = 'Davies');

--LAST_NAME 이 King 인 사원을 매니저로 두고있는 모든 사원들의 LAST_NAME, SALARY 조회
SELECT LAST_NAME, SALARY FROM EMPLOYEES e WHERE MANAGER_ID IN (SELECT EMPLOYEE_ID FROM EMPLOYEES WHERE LAST_NAME = 'King');

--LAST_NAME이 Kochhar인 사원과 동일한 연봉 및 커미션을 버는 사원들의 LAST_NAME, 부서번호, SALARY 조회
--Kochhar 제외한다
SELECT
	LAST_NAME,
	DEPARTMENT_ID ,
	SALARY
FROM
	EMPLOYEES e
WHERE
	(SALARY,
	NVL(COMMISSION_PCT, 0)) IN
(SELECT
	SALARY,
	NVL(COMMISSION_PCT, 0)
FROM
	EMPLOYEES e
WHERE
	LAST_NAME = 'Kochhar') AND E.LAST_NAME != 'Kochhar';

--부서가 위차한 국가 ID, 국가 이름 조회
--COUNTRIES 테이블과 LOCATIONS, DEPARTMENT 이용

SELECT
	C.COUNTRY_ID,
	C.COUNTRY_NAME
FROM
	COUNTRIES c
WHERE
	COUNTRY_ID IN
(
	SELECT
		L.COUNTRY_ID 
	FROM
		LOCATIONS l ,
		(
		SELECT
			LOCATION_ID
		FROM
			DEPARTMENTS d) D
	WHERE
		L.LOCATION_ID = D.LOCATION_ID);

--총 사원 수 및 2013,2014,2015,2016 년도 별 고용된 사원들의 총 수를 조회한다.
	
SELECT DISTINCT (SELECT COUNT(EMPLOYEE_ID)FROM EMPLOYEES e) AS "총 사원수",(SELECT COUNT (EMPLOYEE_ID) FROM EMPLOYEES e WHERE TO_CHAR(HIRE_DATE,'YY') ='13') AS"2013"
,(SELECT COUNT (EMPLOYEE_ID) FROM EMPLOYEES e WHERE TO_CHAR(HIRE_DATE,'YY') ='14')"2014",(SELECT COUNT (EMPLOYEE_ID) FROM EMPLOYEES e WHERE TO_CHAR(HIRE_DATE,'YY') ='15')"2015"
,(SELECT COUNT (EMPLOYEE_ID) FROM EMPLOYEES e WHERE TO_CHAR(HIRE_DATE,'YY') ='16')"2016"
FROM EMPLOYEES e;


--위치 ID가 1700인 사원들의 연봉과 커미션을 추출한뒤, 추출된 사원들의 연봉과 커미션이 동일한 사원정보 조회
--사원번호, 이름(FIRST_NAME + LAST_NAME 결합), 부서번호, 급여 출력

SELECT EMPLOYEE_ID ,FIRST_NAME || ' ' || LAST_NAME AS NAME ,DEPARTMENT_ID , SALARY 
FROM EMPLOYEES e 
WHERE(SALARY , NVL(COMMISSION_PCT,0))  IN (SELECT SALARY , NVL(COMMISSION_PCT,0) 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID IN(SELECT DEPARTMENT_ID 
FROM DEPARTMENTS d  
WHERE d.LOCATION_ID = 1700))

--FULL SCAN
SELECT * FROM EMPLOYEES e WHERE FIRST_NAME = 'Jack';

--테이블 생성 - 구조, 데이터 복사
CREATE TABLE idx_employees AS SELECT DISTINCT FIRST_NAME, LAST_NAME, HIRE_DATE FROM EMPLOYEES e ;

--INDEX 생성
CREATE INDEX idx_name ON idx_employees(first_name);
--INDEX 사용해서 조회 = RANGE SCAN
SELECT * FROM idx_employees e WHERE FIRST_NAME = 'Jack';















